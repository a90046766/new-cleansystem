import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useEffect, useState } from 'react';
import { modelsRepo } from '../../adapters/local/models';
import { authRepo } from '../../adapters/local/auth';
import { Navigate } from 'react-router-dom';
export default function ModelsPage() {
    const u = authRepo.getCurrentUser();
    if (u && u.role === 'technician')
        return _jsx(Navigate, { to: "/dispatch", replace: true });
    const [rows, setRows] = useState([]);
    const [edit, setEdit] = useState(null);
    const load = async () => setRows(await modelsRepo.list());
    useEffect(() => { load(); }, []);
    return (_jsxs("div", { className: "space-y-3", children: [_jsxs("div", { className: "flex items-center justify-between", children: [_jsx("div", { className: "text-lg font-semibold", children: "\u6A5F\u578B\u7BA1\u7406" }), _jsx("button", { onClick: () => setEdit({ category: '', brand: '', model: '', notes: '', blacklist: false, attention: '' }), className: "rounded-lg bg-brand-500 px-3 py-1 text-white", children: "\u65B0\u589E" })] }), rows.map(m => (_jsx("div", { className: "rounded-xl border p-4 shadow-card", children: _jsxs("div", { className: "flex items-center justify-between", children: [_jsxs("div", { children: [_jsxs("div", { className: "font-semibold", children: [m.brand, " ", m.model] }), _jsxs("div", { className: "text-xs text-gray-500", children: [m.category, "\uFF5C", m.blacklist ? '黑名單' : ''] })] }), _jsxs("div", { className: "flex gap-2", children: [_jsx("button", { onClick: () => setEdit(m), className: "rounded-lg bg-gray-900 px-3 py-1 text-white", children: "\u7DE8\u8F2F" }), _jsx("button", { onClick: async () => { const { confirmTwice } = await import('../kit'); if (await confirmTwice('確認刪除？', '刪除後無法復原，仍要刪除？')) {
                                        await modelsRepo.remove(m.id);
                                        load();
                                    } }, className: "rounded-lg bg-rose-500 px-3 py-1 text-white", children: "\u522A\u9664" })] })] }) }, m.id))), edit && (_jsx("div", { className: "fixed inset-0 z-50 grid place-items-center bg-black/30 p-4", children: _jsxs("div", { className: "w-full max-w-md rounded-2xl bg-white p-4 shadow-card", children: [_jsxs("div", { className: "mb-2 text-lg font-semibold", children: [edit.id ? '編輯' : '新增', "\u6A5F\u578B"] }), _jsxs("div", { className: "space-y-2 text-sm", children: [_jsx("input", { className: "w-full rounded border px-2 py-1", placeholder: "\u5206\u985E", value: edit.category, onChange: e => setEdit({ ...edit, category: e.target.value }) }), _jsx("input", { className: "w-full rounded border px-2 py-1", placeholder: "\u54C1\u724C", value: edit.brand, onChange: e => setEdit({ ...edit, brand: e.target.value }) }), _jsx("input", { className: "w-full rounded border px-2 py-1", placeholder: "\u6A5F\u578B", value: edit.model, onChange: e => setEdit({ ...edit, model: e.target.value }) }), _jsx("textarea", { className: "w-full rounded border px-2 py-1", placeholder: "\u5099\u8A3B", value: edit.notes || '', onChange: e => setEdit({ ...edit, notes: e.target.value }) }), _jsxs("div", { className: "flex items-center gap-2", children: [_jsx("input", { type: "checkbox", checked: !!edit.blacklist, onChange: e => setEdit({ ...edit, blacklist: e.target.checked }) }), _jsx("span", { children: "\u9ED1\u540D\u55AE" })] }), _jsx("input", { className: "w-full rounded border px-2 py-1", placeholder: "\u6CE8\u610F\u4E8B\u9805", value: edit.attention || '', onChange: e => setEdit({ ...edit, attention: e.target.value }) })] }), _jsxs("div", { className: "mt-3 flex justify-end gap-2", children: [_jsx("button", { onClick: () => setEdit(null), className: "rounded-lg bg-gray-100 px-3 py-1", children: "\u53D6\u6D88" }), _jsx("button", { onClick: async () => { await modelsRepo.upsert(edit); setEdit(null); load(); }, className: "rounded-lg bg-brand-500 px-3 py-1 text-white", children: "\u5132\u5B58" })] })] }) }))] }));
}
